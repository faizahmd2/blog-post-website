<%- include('partials/_header') -%>

<!-- Simple Pagination css -->
<!-- <link rel="stylesheet" href="vendor/jquery/css/simplePagination.min.css"> -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/simplePagination.js/1.6/simplePagination.min.css" integrity="sha512-m3x+GduGUoEMGB6dywpah/mAG3GafMmxmByGLqKfZFF8xr6THjjOcH0OWV1rLBFiZMotecZxWhRz0lVlVNl72w==" crossorigin="anonymous" referrerpolicy="no-referrer" />
<link rel="stylesheet" href="css/posts.css">

<body class="background-image" style="overflow: hidden;">
  <%- include('partials/_navigation', { user }) -%>
    <% if (hasPosts) { %>
      <div id="post-modal-parent"></div>
      <div class="posts">
        <div class="input-group mb-3 searchbar">
          <div class="input-search-parent">
            <input id="search" type="text" class="form-control" placeholder="Search..." aria-label="Search" aria-describedby="button-addon2">
            <span id="clearSearch" class="clear-search">&times;</span>
          </div>
          <!-- <button class="btn btn-primary" type="button" id="button-addon2">Search</button> -->
        </div>
        <div class="posts-container">
          <div id="all-posts" class="row row-cols-1 row-cols-md-2 row-cols-lg-4 g-1">
              <%- cards %>
          </div>
        </div>
      </div>
      <div class="pagination-container">
        <div id="pagination"></div>
      </div>
    <% } else if (user) { %>
      <%- include('partials/_not_found', { data: { title: "No Posts Found", sub_title: "It seems there are no posts available.", link: "/add_post", link_text: "Add New Post" } }) -%>
    <% } else { %>
      <%- include('partials/_not_found', { data: {title: "No Posts Found", sub_title: "Get Login to add your own posts.", link: "/login", link_text: "Go To Login"} }) -%>
    <% } %>

  <!-- Simple Pagination js -->
  <!-- <script src="/public/vendor/jquery/js/jquery.min.js"></script> -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/simplePagination.js/1.6/jquery.simplePagination.min.js" integrity="sha512-9Dh726RTZVE1k5R1RNEzk1ex4AoRjxNMFKtZdcWaG2KUgjEmFYN3n17YLUrbHm47CRQB1mvVBHDFXrcnx/deDA==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
  <script src="js/utility.js"></script>
  <script>
    const debouncedListChange = debounce(handleListChange, 600);
    var modalEditor, initialContent = null, postModal=null, postModalId = null;

    $(document).ready(function(){
      initScript();
      $("#search").on("input", function() {
        debouncedListChange(this.value,"");
      });

      $("#clearSearch").on("click", function() {
        handleListChange("", "");
        $("#search").val("");
      })

      document.addEventListener("fullscreenchange", function() {
        if (!document.fullscreenElement) {
          onCompressPostModal();
        }
      });

      document.addEventListener("keydown", function(event) {
        let isFocused = modalEditor && modalEditor.hasFocus();
        if ((event.key === "f" || event.key === "F") && postModal && modalEditor && !isFocused) {
          toggleFullscreen(postModal);
        }
      });
    });

    function initScript () {
      // Initialize pagination
      const pageInfoElem = document.getElementById("page-info-hidden");
      if(!pageInfoElem) return;
      const data = JSON.parse(pageInfoElem.innerText);

      const queryParams = parseSearchQuery();
      if(queryParams.search) $("#search").val(queryParams.search);

      $('#pagination').pagination('destroy');
      if(data.totalPage > 1) {
        initPagination(data.totalPage, data.currentPage);
      } else {
        $(".posts-container").css('max-height', '75vh');
      }
    }

    function onCustomCardClicked(id) {
      if(isLoading) return;

      showLoader();
      getPost(id).then(data => {
        showModal();
        initPostModal(data);
        postModal = "compress";
        postModalId = id;
        hideLoader();
      });
    }

    function onCustomCardDelete(id) {
      if(isLoading) return;
      
      showLoader();
      deletePost(id).then((res) => {
        console.log("AFTER REM",res);
        handleListChange();
      });
    }

    async function deletePost(id) {
      let response = await fetchData('/api/add-post', 'PUT', {id: postModalId, type: "remove"});

      if(response.error) return notify.error(response.error);

      if(!response.success) return notify.error("Some error occured");
    }

    async function getPost(id) {
      let post_url = "/api/post/" + id;
      let response_post = await fetchData(post_url);

      if(!response_post.success) return notify.error("Some error occured");

      return response_post;
    }

    function initializeQuillEditor(content) {
      const toolbarOptions = getToolbarOptions();
      modalEditor = new Quill('#post-editor', {
        modules: {
          toolbar: toolbarOptions
        },
        theme: 'bubble'
      });
      const parsedContent = JSON.parse(content);
      modalEditor.setContents(parsedContent); 
      modalEditor.enable(false);
      return modalEditor;
    }

    function clearModal() {
      hideModal();
      const modalParent = document.getElementById("post-modal-parent");
      modalParent.innerHTML = '';
    }

    function initPostModal(data) {
      const html = data['modalHtml'];
      $("#post-modal-parent").append(html);
      initializeQuillEditor(data.content, data.editable);

      $("#post-modal-parent").on("click", function(event){
        event.preventDefault();
        event.stopPropagation();
        if (event.target.hasAttribute('custom-modal-close')) {
          closeFullscreen();
          postModal = null;
          postModalId = null;
          clearModal();
        }
        
        if (event.target.hasAttribute('custom-modal-expand')) {
          onExpandPostModal();
        }

        if (event.target.hasAttribute('custom-modal-compress')) {
          onCompressPostModal();
        }

        if (event.target.hasAttribute('edit-modal')) {
          onEditPostModal();
        }

        if (event.target.hasAttribute('edit-modal-clear')) {
          onClearPostModal();
        }

        if (event.target.hasAttribute('edit-modal-save')) {
          onSavePostModal();
        }

        if (event.target.hasAttribute('edit-modal-publish')) {
          onPostVisiblityChange("publish");
        }

        if (event.target.hasAttribute('edit-modal-private')) {
          onPostVisiblityChange("private");
        }

        // const element = document.querySelector('.ql-editor');
        // document.addEventListener("selectionchange", (event) => {
        //   // Access and copy selected text here (optional)
        //   const selectedText = window.getSelection().toString().trim();
        //   event.preventDefault();
        // });
      });
    }

    function onExpandPostModal() {
      openFullscreen(document.getElementById("post-modal-parent"));
      $("i[custom-modal-expand]").hide();
      $("i[custom-modal-compress]").show();
      const parentEl = document.querySelector('.custom-modal-parent');
      parentEl.classList.add("full");
      postModal = "expand";
    }

    function onCompressPostModal() {
      closeFullscreen();
      $("i[custom-modal-expand]").show();
      $("i[custom-modal-compress]").hide();
      const parentEl = document.querySelector('.custom-modal-parent');
      parentEl.classList.remove("full");
      postModal = "compress";
    }

    function toggleFullscreen(mode) {
      if(mode == "compress") {
        onExpandPostModal();
      } else if(mode == "expand") {
        onCompressPostModal();
      }
    }

    function onEditPostModal() {
      if(modalEditor) {
        initialContent = modalEditor.getContents();
        modalEditor.enable(true);
        modalEditor.focus();
        event.target.classList.add('hide');
        $("#post-modal-parent .icons button[edit-modal-save]").removeClass('hide');
        $("#post-modal-parent .icons button[edit-modal-clear]").removeClass('hide');
      }
    }

    async function onSavePostModal() {
      showLoader();
      if(modalEditor && postModalId) {
        const contentText = modalEditor.getText(0, modalEditor.getLength());
        const currentContent = JSON.stringify(modalEditor.getContents());

        if(!contentText || contentText == "" || contentText.length <= 1) return notify.error("Post Content can't be empty");

        let response = await fetchData('/api/add-post', 'PUT', {id: postModalId, contentText, content: currentContent, type: "edit"});

        if(response.error) return notify.error(response.error);

        if(!response.success) return notify.error("Some error occured");

        initialContent = modalEditor.getContents();
        onClearPostModal();
      }
      hideLoader();
    }

    async function onPostVisiblityChange(mode) {
      showLoader();
      if(modalEditor && postModalId) {
        let response = await fetchData('/api/add-post', 'PUT', {id: postModalId, visiblity: mode, type: "visiblity"});

        if(response.error) return notify.error(response.error);

        if(!response.success) return notify.error("Some error occured");

        afterPostVisibiltyChange(mode);
      }
      hideLoader();
    }

    function afterPostVisibiltyChange(mode) {
      let currentAttr = `edit-modal-${mode}`;
      const button = document.querySelector(`#post-modal-parent .icons button[${currentAttr}]`);

      let newMode = mode == "publish" ? "private" : mode == "private" ? "publish" : "";
      
      if (button && newMode) {
        let newAttr = `edit-modal-${newMode}`;
        let newTxt = newMode == "publish" ? "Publish": "Private";
        button.removeAttribute(currentAttr);
        button.textContent = newTxt;
        button.setAttribute(newAttr, '');
        notify.success(mode == "publish" ? "Post is Public" : "Post is Private");
      } else {
        console.warn(`Button with edit-modal-${mode} attribute not found`);
      }

    }

    function onClearPostModal() {
      if(initialContent && modalEditor) {
        modalEditor.setContents(initialContent);
        modalEditor.enable(false);
        $("#post-modal-parent .icons button[edit-modal-save]").addClass('hide');
        $("#post-modal-parent .icons button[edit-modal-clear]").addClass('hide');
        $("#post-modal-parent .icons i[edit-modal]").removeClass('hide');
      }
    }

    function handleListChange(search, page) {
      showLoader();
      setSearchQueryParam({"search": search, "page": page});
      getPostsByApi().then(e => {
        hideLoader();
      });
    }

    async function getPostsByApi() {
      let locationSearch = window.location.search;
      let template_url = "/api/posts/cards" + locationSearch;
      let response_template = await fetchData(template_url);

      if(response_template.status != 226) return notify.error("Some error occured");

      appendPostsCard(response_template.decompressedData);
      initScript();
    }

    function initPagination(pages, currentPage=1) {
      $('#pagination').pagination({
        pages: pages,
        currentPage: currentPage,
        displayedPages: 3,
        cssStyle: 'light-theme',
        onPageClick: function(pageNumber, event) {
          event.preventDefault();
          showLoader();
          handleListChange($("#search").val(), pageNumber);
        }
      });
    }

    function appendPostsCard(template) {
      const parentDiv = document.getElementById('all-posts');
      parentDiv.innerHTML = '';
      $('#all-posts').append(template);
    }

    function getToolbarOptions() {
      const device = deviceInfo();
      // notify.success(JSON.stringify(device));
      if(device.mobile) {
        // Mobile configuration
        return [
          ['bold', 'italic', 'underline', 'strike'],        // toggled buttons
          [{ 'align': [] }],
          ['blockquote', 'code-block'],
          ['link'],
          [{ 'list': 'bullet' }],
          [{ 'size': ['small', false, 'large', 'huge'] }],
          [{ 'color': [] }, { 'background': [] }],
          [{ 'font': [] }]
        ];
      } else {
        return [
          ['bold', 'italic', 'underline', 'strike'],        // toggled buttons
          [{ 'align': [] }],
          ['blockquote', 'code-block'],
          ['link','formula'],
          [{ 'list': 'ordered'}, { 'list': 'bullet' }, { 'list': 'check' }],
          [{ 'indent': '-1'}, { 'indent': '+1' }],          // outdent/indent
          [{ 'size': ['small', false, 'large', 'huge'] }],  // custom dropdown
          [{ 'color': [] }, { 'background': [] }],          // dropdown with defaults from theme
          [{ 'font': [] }]
        ];
      }
    }
  </script>
</body>


