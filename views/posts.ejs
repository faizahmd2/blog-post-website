<%- include('partials/_header') -%>

<!-- Simple Pagination css -->
<!-- <link rel="stylesheet" href="vendor/jquery/css/simplePagination.min.css"> -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/simplePagination.js/1.6/simplePagination.min.css" integrity="sha512-m3x+GduGUoEMGB6dywpah/mAG3GafMmxmByGLqKfZFF8xr6THjjOcH0OWV1rLBFiZMotecZxWhRz0lVlVNl72w==" crossorigin="anonymous" referrerpolicy="no-referrer" />

<% if (config.editor == "quill") { %>
  <!-- quill -->
  <!-- <link rel="stylesheet" href="vendor/quillJs/css/quill.bubble.min.css"> -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/quill/1.3.7/quill.bubble.min.css" crossorigin="anonymous" referrerpolicy="no-referrer" />
<% } %>

<link rel="stylesheet" href="css/posts.css">

<body class="background-image" style="overflow: hidden;">
  <%- include('partials/_navbar', { user }) -%>
    <% if (hasPosts) { %>
      <div id="post-modal-parent">
        <div click-scale-effect id="custom-modal" class="hidden placeholder-glow">
          <div class="custom-modal-parent">
              <div class="custom-model-content">
                  <div class="header">
                      <div class="icons">
                        <button edit-modal-publish onclick="editModalPublish()" class="btn btn-info hide" title="Make Post Visibility Public">Publish</button>
                        <button edit-modal-private onclick="editModalPrivate()" class="btn btn-info hide" title="Make Post Visibility Private">Private</button>
                        <button edit-modal-delete onclick="editModalDelete()" class="btn btn-danger hide" title="Delete Post">delete</button>
                        <button edit-modal-save onclick="editModalSave()" class="btn btn-primary hide" title="Save Changes">Save</button>
                        <button edit-modal-clear onclick="onClearPostModal()" class="btn btn-warning hide" title="Discard Changes">Clear</button>
                        <i edit-modal onclick="onEditPostModal()" class="fas fa-edit hide" title="Edit Post"></i>
                        <i custom-modal-expand onclick="onExpandPostModal()" class="fas fa-expand" title="Fullscreen"></i>
                        <i custom-modal-compress onclick="onCompressPostModal()" class="fas fa-compress hide" title="Exit Fullscreen"></i>
                        <i custom-modal-close onclick="customModalClose()" class="fas fa-times" title="Close"></i>
                      </div>
                      <hr style="margin: 5px 0;">
                      <h4 class="title"></h4>
                  </div>
                  <hr style="margin: 5px 0;">
                  <div class="section">
                      <div id="post-editor" class=""></div>
                  </div>
              </div>
          </div>
        </div>
      </div>
      <div class="posts">
        <div class="input-group searchbar">
          <div class="input-search-parent">
            <input id="search" type="text" class="form-control" placeholder="Search..." aria-label="Search" aria-describedby="button-addon2">
            <span id="clearSearch" class="clear-search">&times;</span>
          </div>
          <!-- <button class="btn btn-primary" type="button" id="button-addon2">Search</button> -->
        </div>
        <div class="posts-container">
          <div id="all-posts" class="row row-cols-1 row-cols-md-2 row-cols-lg-4 g-1">
              <%- cards %>
          </div>
        </div>
      </div>
      <div class="pagination-container">
        <div id="pagination"></div>
      </div>
    <% } else if (user) { %>
      <%- include('partials/_not_found', { data: { title: "No Posts Found", sub_title: "It seems there are no posts available.", link: "/add_post", link_text: "Add New Post" } }) -%>
    <% } else { %>
      <%- include('partials/_not_found', { data: {title: "No Posts Found", sub_title: "Get Login to add your own posts.", link: "/login", link_text: "Go To Login"} }) -%>
    <% } %>

  <!-- Simple Pagination js -->
  <script src="js/utility.js"></script>

  <!-- <script src="/public/vendor/jquery/js/jquery.min.js"></script> -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/simplePagination.js/1.6/jquery.simplePagination.min.js" integrity="sha512-9Dh726RTZVE1k5R1RNEzk1ex4AoRjxNMFKtZdcWaG2KUgjEmFYN3n17YLUrbHm47CRQB1mvVBHDFXrcnx/deDA==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

  <% if (config.editor == "quill") { %>
    <!-- quill -->
    <script src="vendor/quillJs/js/quill.min.js"></script>
  <% } else { %>
    <!-- ckeditor -->
    <script src="https://cdn.ckeditor.com/ckeditor5/41.2.1/super-build/ckeditor.js"></script>
    <script src="vendor/ck-editor/js/config/bubble.js"></script>
  <% } %>

  <script>
    let editorName = '<%= config.editor || "ck"  %>';
    const debouncedListChange = debounce(handleListChange, 600);
    var modalEditor, ckEditor, initialContent = null, postModal=null, postModalId = null;

    $(document).ready(function() {
      initScript();
      $("#search").on("input", function() {
        debouncedListChange(this.value,"");
      });

      $("#clearSearch").on("click", function() {
        handleListChange("", "");
        $("#search").val("");
      })

      document.addEventListener("fullscreenchange", function() {
        if (!document.fullscreenElement) {
          onCompressPostModal();
        }
      });

      document.addEventListener("keydown", function(event) {
        if(!(event.key === "f" || event.key === "F")) return;

        if(editorName == "quill" && modalEditor) {
          let isFocused = modalEditor.hasFocus();
          if (postModal && !isFocused) {
            toggleFullscreen(postModal);
          }
        } else if(ckEditor && !ckEditor.model.document.isReadOnly) {
          toggleFullscreen(postModal);
        }
      });
    });

    function initScript () {
      // Initialize pagination
      const pageInfoElem = document.getElementById("page-info-hidden");
      if(!pageInfoElem) return;
      const data = JSON.parse(pageInfoElem.innerText);

      const queryParams = parseSearchQuery();
      if(queryParams.search) $("#search").val(queryParams.search);

      $('#pagination').pagination('destroy');
      if(data.totalPage > 1) {
        initPagination(data.totalPage, data.currentPage);
      } else {
        $(".posts-container").css('max-height', '75vh');
      }
    }

    function handleListChange(search, page) {
      showLoader();
      setSearchQueryParam({"search": search, "page": page});
      getPostsByApi().then(e => {
        hideLoader();
      });
    }

    async function getPostsByApi() {
      let locationSearch = window.location.search;
      let t = window.location.pathname == "/" ? "r" : "p";
      let template_url = "/api/posts/cards" + locationSearch + "?t=" + t;
      let response_template = await fetchData(template_url);

      if(response_template.status != 226) return notify.error("Some error occured");

      appendPostsCard(response_template.decompressedData);
      initScript();
    }

    function initPagination(pages, currentPage=1) {
      $('#pagination').pagination({
        pages: pages,
        currentPage: currentPage,
        displayedPages: 3,
        cssStyle: 'light-theme',
        onPageClick: function(pageNumber, event) {
          event.preventDefault();
          showLoader();
          handleListChange($("#search").val(), pageNumber);
        }
      });
    }

    function appendPostsCard(template) {
      const parentDiv = document.getElementById('all-posts');
      parentDiv.innerHTML = '';
      $('#all-posts').append(template);
    }

    // POST MODAL CODE
    function onCustomCardClicked(id) {
      if(isLoading) return;
      
      showModal();
      $("#post-modal-parent .title").addClass('placeholder');

      getPost(id).then(data => {
        initPostModal(data);
        $("#post-modal-parent .title").removeClass('placeholder');
        postModal = "compress";
        postModalId = id;
      });
    }

    async function getPost(id) {
      let post_url = "/api/post/" + id;
      let response_post = await fetchData(post_url);

      if(!response_post.success) return notify.error("Some error occured");

      return response_post;
    }

    function editModalPublish() {
      if(confirm("Are you sure you want to make post public?")) {
        onPostVisiblityChange("publish");
      }
    }

    function editModalPrivate() {
      if(confirm("Are you sure you want to make post private?")) {
        onPostVisiblityChange("private");
      }
    }

    function editModalDelete() {
      if(confirm("Are you sure you want to delete the post?")) {
        onCustomCardDelete(postModalId);
      }
    }

    function customModalClose() {
      closeFullscreen();
      if(editorName != "quill" && ckEditor) ckEditor.destroy();
      postModal = null;
      postModalId = null;
      clearModal();
    }

    function onCustomCardDelete(id) {
      if(isLoading) return;

      showLoader();
      deletePost(id).then((res) => {
        if(res) {
          clearModal();
          handleListChange($("#search").val(), "");
        }
      });
    }

    async function deletePost(id) {
      let response = await fetchData('/api/add-post', 'PUT', {id: postModalId, type: "remove"});

      if(response.error) return notify.error(response.error);

      if(!response.success) return notify.error("Some error occured");

      return id;
    }

    function initializeEditor(content) {
      if(editorName == "quill") {
        const toolbarOptions = getToolbarOptions();
        modalEditor = new Quill('#post-editor', {
          modules: {
            toolbar: toolbarOptions
          },
          theme: 'bubble'
        });
        const parsedContent = JSON.parse(content);
        modalEditor.setContents(parsedContent); 
        modalEditor.enable(false);
        return modalEditor;
      } else {
        ckEditorConfig.initialData = content;
  
        CKEDITOR.BalloonEditor
          .create( document.getElementById('post-editor'), ckEditorConfig)
          .then((newEditor) => {
            ckEditor = newEditor;
            ckEditor.enableReadOnlyMode("");
          })
          .catch( error => {
              console.error( error );
          } );
      }
    }

    function clearModal() {
      hideModal();
      document.getElementById("post-editor").innerHTML = '';
      $("button[edit-modal-publish]").addClass("hide");
      $("button[edit-modal-private]").addClass("hide");
      $("i[edit-modal]").addClass("hide");
      $("button[edit-modal-delete]").addClass("hide");
      $("button[edit-modal-save]").addClass("hide");
      $("button[edit-modal-clear]").addClass("hide");
    }

    function initPostModal(data) {
      $(".custom-model-content .title").text(data.title);

      if(data.editable) {
        if(data.publish) {
          $("button[edit-modal-publish]").removeClass("hide");
          $("button[edit-modal-private]").addClass("hide");
        } else {
          $("button[edit-modal-publish]").addClass("hide");
          $("button[edit-modal-private]").removeClass("hide");
        }

        $("i[edit-modal]").removeClass("hide");
        $("button[edit-modal-delete]").removeClass("hide");
      } else {
        $("i[edit-modal]").addClass("hide");
        $("button[edit-modal-delete]").addClass("hide");
      }

      initializeEditor(data.content, data.editable);
    }

    function onExpandPostModal() {
      openFullscreen(document.getElementById("post-modal-parent"));
      $("i[custom-modal-expand]").hide();
      $("i[custom-modal-compress]").show();
      const parentEl = document.querySelector('.custom-modal-parent');
      parentEl.classList.add("full");
      postModal = "expand";
    }

    function onCompressPostModal() {
      closeFullscreen();
      $("i[custom-modal-expand]").show();
      $("i[custom-modal-compress]").hide();
      const parentEl = document.querySelector('.custom-modal-parent');
      parentEl.classList.remove("full");
      postModal = "compress";
    }

    function toggleFullscreen(mode) {
      if(mode == "compress") {
        onExpandPostModal();
      } else if(mode == "expand") {
        onCompressPostModal();
      }
    }

    function onEditPostModal() {
      if(editorName == "quill") {
        if(modalEditor) {
          initialContent = modalEditor.getContents();
          modalEditor.enable(true);
          modalEditor.focus();
        }
      } else if(ckEditor) {
        initialContent = ckEditor.getData();
        ckEditor.disableReadOnlyMode("");
      }

      $("#post-modal-parent .icons i[edit-modal]").addClass('hide');
      $("#post-modal-parent .icons button[edit-modal-save]").removeClass('hide');
      $("#post-modal-parent .icons button[edit-modal-clear]").removeClass('hide');
    }

    async function onSavePostModal() {
      if(isLoading) return;
      
      showLoader();
      if(modalEditor && postModalId) {
        const contentText = modalEditor.getText(0, modalEditor.getLength());
        const currentContent = JSON.stringify(modalEditor.getContents());

        if(!contentText || contentText == "" || contentText.length <= 1) return notify.error("Post Content can't be empty");

        let response = await fetchData('/api/add-post', 'PUT', {id: postModalId, contentText, content: currentContent, type: "edit"});

        if(response.error) return notify.error(response.error);

        if(!response.success) return notify.error("Some error occured");

        initialContent = null;
        onClearPostModal();
      }
      hideLoader();
    }

    async function onPostVisiblityChange(mode) {
      if(isLoading) return;

      showLoader();
      if(postModalId) {
        let response = await fetchData('/api/add-post', 'PUT', {id: postModalId, visiblity: mode, type: "visiblity"});

        if(response.error) return notify.error(response.error);

        if(!response.success) return notify.error("Some error occured");

        afterPostVisibiltyChange(mode);
      }
      hideLoader();
    }

    function afterPostVisibiltyChange(mode) {
      let currentAttr = `edit-modal-${mode}`;
      let newMode = mode == "publish" ? "private" : mode == "private" ? "publish" : "";
      let newAttr = `edit-modal-${newMode}`;
      $(`button[${currentAttr}]`).addClass("hide");
      $(`button[${newAttr}]`).removeClass("hide");
      notify.success(mode == "publish" ? "Post is Public" : "Post is Private");
    }

    function onClearPostModal() {
      if(!initialContent) return;

      if(editorName == "quill") {
        modalEditor.setContents(initialContent);
        modalEditor.enable(false);
      } else if(ckEditor) {
        ckEditor.setData(initialContent);
        ckEditor.enableReadOnlyMode("");
      }

      $("#post-modal-parent .icons button[edit-modal-save]").addClass('hide');
      $("#post-modal-parent .icons button[edit-modal-clear]").addClass('hide');
      $("#post-modal-parent .icons i[edit-modal]").removeClass('hide');
    }

    '<% if (config.editor == "quill") { %>'
    function getToolbarOptions() {
      const device = deviceInfo();
      // notify.success(JSON.stringify(device));
      if(device.mobile) {
        // Mobile configuration
        return [
          ['bold', 'italic', 'underline', 'strike'],        // toggled buttons
          [{ 'align': [] }],
          ['blockquote', 'code-block'],
          ['link'],
          [{ 'list': 'bullet' }],
          [{ 'size': ['small', false, 'large', 'huge'] }],
          [{ 'color': [] }, { 'background': [] }],
          [{ 'font': [] }]
        ];
      } else {
        return [
          ['bold', 'italic', 'underline', 'strike'],        // toggled buttons
          [{ 'align': [] }],
          ['blockquote', 'code-block'],
          ['link','formula'],
          [{ 'list': 'ordered'}, { 'list': 'bullet' }, { 'list': 'check' }],
          [{ 'indent': '-1'}, { 'indent': '+1' }],          // outdent/indent
          [{ 'size': ['small', false, 'large', 'huge'] }],  // custom dropdown
          [{ 'color': [] }, { 'background': [] }],          // dropdown with defaults from theme
          [{ 'font': [] }]
        ];
      }
    }
    '<% } %>'
  </script>
</body>


