<%- include('partials/_header') -%>

<% if (config.editor == "quill") { %>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/quill/1.3.7/quill.snow.min.css" integrity="sha512-/FHUK/LsH78K9XTqsR9hbzr21J8B8RwHR/r8Jv9fzry6NVAOVIGFKQCNINsbhK7a1xubVu2r5QZcz2T9cKpubw==" crossorigin="anonymous" referrerpolicy="no-referrer" />
  <script src="vendor/quillJs/js/quill.min.js"></script>
<% } else { %>
  <link rel="stylesheet" href="css/font-family.css">
  <script src="https://cdn.ckeditor.com/ckeditor5/41.2.1/super-build/ckeditor.js"></script>
<% } %>

<% if (config.isProduction) { %>
  <link rel="stylesheet" href="build/add_post.css">
<% } else { %> 
  <link rel="stylesheet" href="css/add_post.css">
<% } %>


<body class="background-image">
<%- include('partials/_navbar', { user }) -%>

  <div class="form-container">
    <div class="form-group floating-label-form-group">
      <input type="text" name="title" class="form-control" placeholder="Title..." required data-validation-required-message="Please enter post title">
    </div>
    <div class="editor-container">
      <div id="editor"></div>
    </div>
    <div class="bottom-actions">
      <div class="left-actions consent-public-check form-check">
        <input type="checkbox" class="form-check-input" id="publicPost" name="publicPost">
        <label class="form-check-label" for="publicPost">Public Post</label>
      </div>
      <div class="right-actions">
        <button class="btn btn-primary" onclick="resetForm()">Reset</button>
        <button type="submit" class="btn btn-primary" disabled onclick="submitForm()">Create</button>
      </div>
    </div>
  </div>

  <script>
    let editorName = '<%= config.editor || "ck"  %>';
  </script>

  <% if (config.isProduction) { %>
    <script src="build/utility.js"></script>
    <script src="vendor/ck-editor/js/config/classic.js"></script>
    <script src="build/add_post.js"></script>
  <% } else { %>
  <script src="js/utility.js"></script>
  <script src="vendor/ck-editor/js/config/classic.js"></script>
  <script build="add_post">
    var ckEditor, qEditor, content = localStorage.getItem("post_cached_content");

    $(document).ready(function() {
      if(editorName == "quill") {
        const toolbarOptions = getToolbarOptions();
        qEditor = new Quill('#editor', {
          modules: {
            toolbar: toolbarOptions
          },
          theme: 'snow'
        });

        qEditor.on('text-change', function() {
          const currentContent = JSON.stringify(qEditor.getContents());
          localStorage.setItem('post_cached_content', currentContent);
        });
        setCacheDataOnLoad();
      } else {
        showLoader();
        CKEDITOR.ClassicEditor.create(document.getElementById("editor"), ckEditorConfig).then((newEditor) => {
          ckEditor = newEditor;
          setCacheDataOnLoad();
          hideLoader();
          ckEditor.model.document.on('change:data', () => {
            const data = ckEditor.getData();
            localStorage.setItem("post_cached_content",data);
          });
        });
      }

      $("input[name='title']").on("input", function(e) {
        localStorage.setItem('post_cached_title', $("input[name='title']").val());
      });

      $("input[name='publicPost']").change(function(e) {
        localStorage.setItem('post_cached_publicPost', $("input[name='publicPost']").prop("checked"));
      });

      $("button[type='submit']").prop("disabled", false);

      window.addEventListener('beforeunload', handleBeforeUnload);
    });

    function handleBeforeUnload(event) {
      console.log("UNLOAD", JSON.stringify(event));
      // resetForm();

      // Optionally, you can return a string to display a confirmation dialog to the user
      // This will prompt the user with a dialog asking if they want to leave the page
      // Make sure to return undefined to prevent the dialog from showing if no cleanup is needed
      //return 'Are you sure you want to leave this page?';
    }

    function setCacheDataOnLoad() {
      loadContentFromLocalStorage();
      let title = localStorage.getItem('post_cached_title');
      let publicPost = localStorage.getItem('post_cached_publicPost');
      if(title) {
        $("input[name='title']").val(title);
      }
      if (publicPost) {
        if(publicPost == "true") publicPost = true;
        else publicPost = false;
        $("input[name='publicPost']").prop("checked", publicPost);
      }
    }

    async function submitForm() {
      let formData = getFormData();

      let validationError = formValidationError(formData);

      if(validationError) return notify.error(validationError);

      showLoader();

      let response = await fetchData('/api/add-post', 'POST', formData);

      if(response.error) return notify.error(response.error);

      if(!response.success) return notify.error("Some error occured");

      resetForm();

      hideLoader();
      notify.success("Post Added Successfully!");

      setTimeout(() => {
        window.location.href = "/posts";
      },700);
    }

    function loadContentFromLocalStorage() {
      const savedContent = localStorage.getItem('post_cached_content');
      if(!savedContent) return;

      if(editorName == "quill" && qEditor) {
        try {
          const parsedContent = JSON.parse(savedContent);
          qEditor.setContents(parsedContent); 
        } catch (error) {
          console.error('Error parsing stored content:', error);
        }
      } else if(ckEditor) {
        ckEditor.setData(savedContent);
      }
    }

    function resetForm () {
      if(editorName == "quill" && qEditor) {
        qEditor.setText('');
      } else if(ckEditor) {
        ckEditor.setData('');
      }
      
      $("input[name='title']").val('');
      $("input[name='publicPost']").prop("checked", false);
      localStorage.removeItem('post_cached_content');
      localStorage.removeItem('post_cached_title');
      localStorage.removeItem('post_cached_publicPost');
    }

    function formValidationError(data) {
      if(!data.title || data.title == "") return "Title is Required";

      if(!data.contentText || data.contentText == "" || data.contentText.length <= 1) return "Please add post content";

      return null;
    }

    function getFormData() {
      if(editorName == "quill" && qEditor) {
        const contentText = qEditor.getText(0, qEditor.getLength());
        console.log("--------");
        console.log(contentText);
        const currentContent = JSON.stringify(qEditor.getContents());
        console.log(currentContent);
  
        const title = $("input[name='title']").val();
        const publicPost = $("input[name='publicPost']").prop("checked");
  
        return {title, content: currentContent, contentText: contentText, publicPost, editor: "quill"};
      } else if(ckEditor) {
        const currentContent = ckEditor.getData();

        const contentText = stripHtmlTags(currentContent);

        const lines = contentText.split('\n').slice(0, 6);
        const firstFewLines = lines.join('\n');
  
        const title = $("input[name='title']").val();
        const publicPost = $("input[name='publicPost']").prop("checked");
  
        return {title, content: currentContent, contentText: firstFewLines, publicPost};
      }
    }

    function stripHtmlTags(html) {
      const div = document.createElement("div");
      div.innerHTML = html;
      return div.textContent || div.innerText || "";
    }

    function getToolbarOptions() {
      const device = deviceInfo();
      // notify.success(JSON.stringify(device));
      if(device.mobile) {
        // Mobile configuration
        return [
          ['bold', 'italic', 'underline', 'strike'],        // toggled buttons
          [{ 'align': [] }],
          ['blockquote', 'code-block'],
          ['link'],
          [{ 'list': 'bullet' }],
          [{ 'size': ['small', false, 'large', 'huge'] }],
          [{ 'color': [] }, { 'background': [] }],
          [{ 'font': [] }]
        ];
      } else {
        return [
          ['bold', 'italic', 'underline', 'strike'],        // toggled buttons
          [{ 'align': [] }],
          ['blockquote', 'code-block'],
          ['link','formula'],
          [{ 'list': 'ordered'}, { 'list': 'bullet' }, { 'list': 'check' }],
          [{ 'script': 'sub'}, { 'script': 'super' }],      // superscript/subscript
          [{ 'indent': '-1'}, { 'indent': '+1' }],          // outdent/indent
          [{ 'direction': 'rtl' }],                         // text direction
          [{ 'size': ['small', false, 'large', 'huge'] }],  // custom dropdown
          [{ 'header': [1, 2, 3, 4, 5, 6, false] }],
          [{ 'color': [] }, { 'background': [] }],          // dropdown with defaults from theme
          [{ 'font': [] }],
          ['clean']                                         // remove formatting button
        ];
      }
    }

  </script>
  <% } %>
</body>