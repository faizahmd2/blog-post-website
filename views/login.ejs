<%- include('partials/_header') -%>
<link rel="stylesheet" href="css/login.css">

<body class="background-image" style="overflow: hidden;">
  <%- include('partials/_navigation', { user }) -%>
    <div class="login full-screen-container">
      <div class="input-container">
        <h1 class="login-title">SIGN <%= isSignup ? 'UP' : 'IN' %></h1>
        <div class="form" action="<%= isSignup ? 'signup' : 'login' %>">
          <div class="feild-container">
            <% if(isSignup){ %>
              <div class="input-group name-parent">
                <label for="name">Name<span class="red">*</span></label>
                <input type="text" name="name" class="input-name" placeholder="Name">
              </div>
           <% } %>

            <div class="input-group username-parent">
              <label for="username">Username<span class="red">*</span></label>
              <input type="text" name="username" class="input-username" placeholder="Username">
            </div>

            <div class="input-group password-parent">
              <label for="password">Password<span class="red">*</span></label>
              <div class="pass-box">
                <input type="password" name="password" class="input-password" placeholder="Password">
                <img class="icon-password" src="/img/icons/invisible.png" alt="" onclick="togglePasswordVisibility('password')">
              </div>
            </div>

            <% if(isSignup){ %>
            <div class="input-group password2-parent">
              <label for="password2">Verify Password<span class="red">*</span></label>
              <div class="pass-box">
                <input type="password" name="password2" class="input-password2"
                  placeholder="Verify Password">
                <img class="icon-password2" src="/img/icons/invisible.png" alt="" onclick="togglePasswordVisibility('password2')">
              </div>
            </div>

            <div class="additional-fields">
              <div class="input-group">
                <label for="email">Email</label>
                <input type="email" name="email" placeholder="Email">
              </div>

              <div class="input-group">
                <label for="phone">Phone</label>
                <input type="number" name="phone" placeholder="Phone">
              </div>

              <div class="input-group">
                <label for="dob">Date Of Birth</label>
                <input type="date" name="age">
              </div>

              <div class="input-group">
                <label for="address">Address</label>
                <input type="text" name="address" placeholder="Address">
              </div>

              <div class="input-group">
                <label for="pincode">Pincode</label>
                <input type="number" name="pincode" placeholder="Pincode">
              </div>
            </div>
            <div class="additional">
              <img class="additional-icon" src="/img/icons/slide-down.png" alt="" onclick="toggleAdditionalFields()">
              <span>Add Additional Details</span>
            </div>
            <% } %>
          </div>
          <div class="footer">
            <div class="forget-pass">
              <% if(!isSignup){ %>
              <span>Forgot Password?</span>
              <% } %>
              <span class="toggle-span" onclick="toggleSigningMethod()"> <%= isSignup ? 'Signin?' : 'Signup?' %> </span>
            </div>
            <div class="button-container">
              <button id="reset-btn" type="button" class="submit-button" onclick="resetFormData()">Reset</button>
              <button id="submit-btn" type="submit" class="submit-button disabled" onclick="submitForm(true)"> <%= isSignup ? 'Signup' : 'Login' %> </button>
            </div>
          </div>
        </form>
      </div>
    </div>
  
  <!-- Main JS -->
  <script src="js/utility.js"></script>
  <script>
    let validationInput = [];

    init();

    async function init() {
      if(isSignup()) {
        validationInput = ["name", "username", "password", "password2"];
      } else {
        validationInput = ["username", "password"];
      }
      resetFormData();
    }

    async function submitForm(btnSubmit) {
      if(btnSubmit) {
        let submitError = submitFormError();
        if(submitError) return;
      }

      let formData = getFormData();
      let isLogin = !isSignup();

      let response = await fetchData(isLogin ? '/login' : '/signup', 'POST', formData);

      if(response.error) return notify.error(response.error);
      
      if(isLogin) {
        if(!response.success) return notify.error("Could Not Login!");
        notify.success("Logged In Successfully!");
        setTimeout(() => {
          window.location.href = '/';
        }, 2000)
      } else {
        if(response.status != 201) return notify.error("Could Not Register User!");
        notify.success("Registered!! Please Login");
        toggleSigningMethod();
      }
    }

    function getFormData(reset) {
      let dta = {};
      $('input').each(function() {
          if(reset) {
            $(this).val('');
          } else {
            dta[this.name] = $(this).val();
          }
      });

      if(isSignup()) {
        $('textarea').each(function() {
          if(reset) {
            $(this).val('');
          } else {
            dta[this.name] = $(this).val();
          }
        });
      }

      if(!reset) return dta;
    }

    function toggleSigningMethod() {
      let params = new URLSearchParams(window.location.search);

      if(isSignup()) {
        params.delete('register');
      } else {
        params.set('register', '1');
      }

      window.history.replaceState({}, '', `${window.location.pathname}?${params}`);
      window.location.reload();
    }

    function isSignup() {
      let queryParam = parseSearchQuery();
      if(queryParam.register == "1") return true;

      return false;
    }

    function isAdditional() {
      if(!isSignup()) return null;

      const target = $('.additional-fields');
      if (target.css('display') === 'none' || target.css('display') === '') {
        return false;
      } else {
        return true;
      }
    }

    function toggleAdditionalFields() {
      let addt = isAdditional();
      if(addt === null) return;

      if(addt) {
        $('.additional-fields').hide();
        $('.additional-icon').attr('src', '/img/icons/slide-down.png');
      } else {
        $('.additional-fields').show();
        $('.additional-icon').attr('src', '/img/icons/slide-up.png');
      }
    }

    function togglePasswordVisibility(type) {
      let imgClass = ".icon-" + type;
      let inputClass = ".input-" + type;

      if($(inputClass).attr('type') === 'password') {
        $(inputClass).attr('type', 'text');
        $(imgClass).attr('src', '/img/icons/visible.png');
      } else {
        $(inputClass).attr('type', 'password');
        $(imgClass).attr('src', '/img/icons/invisible.png');
      }
    }

    function resetFormData() {
      if (isSignup()) {
        $(".additional-fields").hide();
      }
      
      getFormData(true);

      for(let _type of validationInput) {
        $(`span[err-message='${_type}']`).hide();
        $(`.input-${_type}`).removeClass("error");
        $(`.input-${_type}`).removeClass("success");
      }
    }

    function showError(type, message) {
      const messageElement = $(`span[err-message='${type}']`);
      
      if (messageElement.length) {
        messageElement.text(`*${message}`);
        messageElement.show();
      } else {
        const elem = $('<span>', { 'err-message': type, 'class': 'msg red', text: `*${message}` });
        let parentClass = "." + type+"-parent";
        const parentDiv = $(parentClass);
        parentDiv.append(elem);
      }
    }

    function hideError(type) {
      const messageElement = $(`span[err-message='${type}']`);
      if (messageElement.length) {
        messageElement.hide();
      }
    }

    function submitFormError() {
      for(let _type of validationInput) {
        let error = formValid(_type, $(`.input-${_type}`).val());
        if(error) {
          return error;
        }
      }

      return false;
    }

    function formValid(type, value) {
      let error = null;
      let signup = isSignup();
      switch(type) {
        case "username" :
          if(signup) {
            if(!value) error = "Username Required";
            if(value.length < 4) error = "Atleast 4 character required";
            if(value.length > 30) error = "Username too long";
            if(!/^[a-zA-Z_][a-zA-Z0-9_]*$/.test(value)) error = "Only alphabets, number and underscore allowed";
          } else if(!value) {
            error = "Username Can't be empty";
          }
          break;
        // case "email" :
        //   if(signup && !/^[\w-]+(\.[\w-]+)*@([\w-]+\.)+[a-zA-Z]{2,7}$/.test(value)) {
        //     error = "Invalid Email";
        //   } else if(!value) {
        //     error = "Email Required";
        //   }
        //   if(value.length > 40) error = "Please provide correct email";
        //   break;
        // case "name" :
        //   if(!value) error = "Please enter name";
        //   if(value.length > 40) error = "Name is too long";
        //   break;
        case "password" :
          if(!value) error = "Password Can't be empty";
          if(signup) {
            if(value.length < 5) error = "Password must be atleast 5 characters long";
            if(value.length > 50) error = "Password is too long";
          }
          break;
        case "password2" :
          if($('.input-password').val() != value) error = "Password not matched";
          break;
      }

      return error;
    }

    $("input").on("keyup", function(event) {
      let type = event.target.name;
      if(event.target.keyCode !== 13 && validationInput.includes(type)) {
        const currentInputElement = $(`.input-${type}`);
        let hasErrorClass = currentInputElement.hasClass('error');

        let error = formValid(type, event.target.value);
        if(error) {
          if (!hasErrorClass) {
              currentInputElement.addClass('error');
          }
          showError(type, error);
        } else {
          if(hasErrorClass) {
            currentInputElement.removeClass('error');
          }
          if(isSignup() && !currentInputElement.hasClass('success')) {
            if(type == "username") {
              fetchData('/validate-username', 'POST', {key: event.target.value}).then(response => {
                if(response.success) {
                  currentInputElement.addClass('success');
                } else if(response.error) {
                  currentInputElement.addClass('error');
                  showError(type, response.error);
                };
              });
            } else {
              currentInputElement.addClass('success');
            }
          }
          hideError(type);
        }
      }

      let submitError = submitFormError();
      if(event.target.keyCode === 13) {
        if(submitError) return showError(type, submitError);

        return submitForm();
      }

      if(submitError) $("#submit-btn").addClass('disabled');
      else $("#submit-btn").removeClass('disabled');
    });

    $("input").on("focusout", function(event) {
      if(validationInput.includes(event.target.name)) {
        $(`.input-${event.target.name}`).removeClass('success');
      }
    });
  </script>
</body>